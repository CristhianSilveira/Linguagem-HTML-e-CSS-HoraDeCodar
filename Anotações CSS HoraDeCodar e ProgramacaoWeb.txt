                    --- Anotações CSS ---

Canal: Programação Web: CSS em 7 horas.
Canal: Hora De Codar: CSS em 2 horas - 2021.
Canal: Hora De Codar: Media Query 30 minutos - 2021.


1- Introdução:
    1.1- O que é CSS? 
        CSS é a linguagem que usamos para estilizar um documento HTML. CSS descreve como os elementos HTML devem ser exibidos. CSS significa Cascading Style Sheets

    1.2- Formato de Arquivo:
        .css

    1.2- Sintaxe: 
        Uma regra CSS consiste em um seletor e um bloco de declaração. O seletor aponta para o elemento HTML que você deseja estilizar. O bloco de declaração contém uma ou mais declarações separadas por ponto e vírgula. Cada declaração inclui um nome de propriedade CSS e um valor, separados por dois pontos. Várias declarações CSS são separadas por ponto e vírgula e os blocos de declaração são cercados por chaves.   
        EX:  p {
                color: red;
                text-align: center;
                }
        Explicando: p é um seletor em CSS (aponta para o elemento HTML que você deseja estilizar: <p>). color é uma propriedade e red é o valor da propriedade text-align é uma propriedade e center é o valor da propriedade.

    1.3- Inserir CSS:
        Existem três maneiras de inserir uma folha de estilo: CSS externo, CSS interno e CSS embutido/inline
        
        1.3.1- CSS Externo: 
            Com uma folha de estilo externa, você pode alterar a aparência de um site inteiro alterando apenas um arquivo. Cada página HTML deve incluir uma referência ao arquivo de folha de estilo externo dentro do elemento <link>, dentro da seção head.   EX: <link rel="stylesheet" href="mystyle.css">

        1.3.2- CSS Interno: 
            Uma folha de estilo interna pode ser usada se uma única página HTML tiver um estilo único. O estilo interno é definido dentro do elemento <style>, dentro da seção head.

        1.3.3- CSS Embutido/inline: 
            Um estilo embutido pode ser usado para aplicar um estilo único a um único elemento. Para usar estilos embutidos, adicione o atributo style ao elemento relevante. O atributo style pode conter qualquer propriedade CSS.   EX: <p style="color:red;">Um parágrafo vermelho.</p>

    1.4- Seletores: 
        Os seletores CSS são usados ​​para "encontrar" (ou selecionar) os elementos HTML que você deseja estilizar.
                
        1.4.1- Seletor de Elemento: 
            O seletor de elemento seleciona elementos HTML com base no nome do elemento.   EX: p {   text-align: center;   color: red;   }

        1.3.2- Seletor de Id: 
            O seletor id usa o atributo id de um elemento HTML para selecionar um elemento específico. O id de um elemento é único dentro de uma página, então o seletor de id é usado para selecionar um elemento único! Para selecionar um elemento com um id específico, escreva um caractere hash (#), seguido do id do elemento.   EX: #para1 {   text-align: center;   color: red;   }

        1.3.3- Seletor de Classe: 
            O seletor de classe seleciona elementos HTML com um atributo de classe específico. Para selecionar elementos com uma classe específica, escreva um caractere de ponto (.), seguido do nome da classe.   EX: p.center {   text-align: center;   color: red;   }

        1.3.4- Seletor Universal: 
            O seletor universal (*) seleciona todos os elementos HTML na página.   EX:   * {   text-align: center;   color: blue;   }

        1.3.5- Seletor de Agrupamento: 
            O seletor de agrupamento seleciona todos os elementos HTML com as mesmas definições de estilo. Para agrupar seletores, separe cada seletor com uma vírgula.   EX:   h1, h2, p {   text-align: center;   color: red;   }

    1.5- Comentários: 
        Usar */ comentário */ ; Os comentários CSS não são exibidos no navegador, mas podem ajudar a documentar seu código-fonte CSS.

2- Cores: 
    2.1- Introdução:
        As cores CSS são especificadas com nomes de cores predefinidos ou com valores RGB, HEX, HSL, RGBA ou HSLA.
        
    2.2- Nomes de cores: 
        Em CSS, uma cor pode ser especificada usando um nome de cor: EX: red, Orange, Blue, Green, Yellow, Violet, LightGray, etc.
        
    2.3- Cores RGB e RGBA: 
        Um valor de cor RGB representa as fontes de luz VERMELHA, VERDE e AZUL. Um valor de cor RGBA é uma extensão de RGB com um canal Alfa (opacidade).
                
        2.3.1- Rgb(red, green, blue):
            Cada parâmetro (vermelho, verde e azul) define a intensidade da cor com um valor entre 0 e 255. Isso significa que existem 256 x 256 x 256 = 16777216 cores possíveis.   EX: rgb(255, 0, 0) é exibido como vermelho, porque o vermelho é definido como seu valor mais alto (255).   EX2: rgb(0, 255, 0) é exibido como verde, porque o verde é definido como seu valor mais alto (255).   OBS: Para exibir preto, defina todos os parâmetros de cor como 0, assim: rgb(0, 0, 0).   Para exibir branco, defina todos os parâmetros de cor para 255, assim: rgb(255, 255, 255).   Os tons de cinza geralmente são definidos usando valores iguais para todos os três parâmetros
                
        2.3.2- RGBA(vermelho, verde, azul, alfa): 
            Os valores de cores RGBA são uma extensão dos valores de cores RGB com um canal Alfa - que especifica a opacidade de uma cor. O parâmetro alfa é um número entre 0,0 (totalmente transparente) e 1,0 (nada transparente): EX: rgba(255, 180, 95, 0.5)

    2.4- Cores Hexadecimais: 
            Uma cor hexadecimal é especificada com: #RRGGBB, onde os inteiros hexadecimais RR(vermelho), GG(verde) e BB(azul) especificam os componentes da cor. Os valores hexadecimais estão entre 00 e ff (o mesmo que decimal 0-255).   EX: #ff0000 é exibido em vermelho, porque o vermelho está definido para seu valor mais alto (ff) e os outros dois (verde e azul) estão definidos para 00.   EX2: #00ff00 é exibido como verde, porque o verde está definido com seu valor mais alto (ff) e os outros dois (vermelho e azul) estão definidos como 00.   OBS: Para exibir preto, defina todos os parâmetros de cor como 00, assim: #000000.   Para exibir o branco, defina todos os parâmetros de cor como ff, assim: #ffffff.   Os tons de cinza geralmente são definidos usando valores iguais para todos os três parâmetros.

    2.5- Cores HSL e HSLA: 
            HSL significa matiz, saturação e leveza. Os valores de cores HSLA são uma extensão do HSL com um canal Alfa (opacidade).
                
        2.5.1- HSL: 
            Em CSS, uma cor pode ser especificada usando matiz, saturação e luminosidade (HSL) na forma: hsl( matiz , saturação , luminosidade)   OBS: Matiz é um grau na roda de cores de 0 a 360, 0 é vermelho, 120 é verde e 240 é azul.   A saturação é um valor percentual, 0% significa um tom de cinza e 100% é a cor total.   A leveza também é um valor percentual, 0% é preto e 100% é branco.   Os tons de cinza geralmente são definidos definindo o matiz e a saturação como 0 e ajustando a luminosidade de 0% a 100% .
                
        2.5.2- HSLA: 
            Os valores de cores HSLA são uma extensão dos valores de cores HSL, com um canal Alfa - que especifica a opacidade de uma cor. hsla(matiz, saturação, luminosidade, alfa), O parâmetro alfa é um número entre 0,0 (totalmente transparente) e 1,0 (nada transparente):

3- Fundos: 
    3.1- Introdução:
        As propriedades de plano de fundo do CSS são usadas para adicionar efeitos de plano de fundo aos elementos.
        
    3.2- Cor de fundo: 
        A propriedade background-color especifica a cor de fundo de um elemento.   EX: body {  background-color: lightblue;   }
        
        3.1.1- Opacity: 
            A propriedade opacity especifica a opacidade/transparência de um elemento. Pode assumir um valor de 0,0 - 1,0. Quanto menor o valor, mais transparente:

    3.3- Imagem de Fundo: 
        A propriedade background-image especifica uma imagem a ser usada como plano de fundo de um elemento. Por padrão, a imagem é repetida para cobrir todo o elemento.   EX: body {   background-image: url("pato.jpg");   }

    3.4- Repetição no plano de fundo: 
        Por padrão, a propriedade background-image repete uma imagem horizontal e verticalmente. Algumas imagens devem ser repetidas apenas na horizontal ou na vertical, ou ficarão estranhas. Para repetir uma imagem verticalmente, defina o (background-repeat: repeat-y) e na horizontal ( background-repeat: repeat-x;). Use (background-repeat: no-repeat) para nao ter repetição.
            
        3.3.1- Posição do plano de fundo: 
            A propriedade background-position é usada para especificar a posição da imagem de fundo.   EX: background-position: right top; (posição = direita e em cima)

    3.5- Fixação de conteúdo: 
        A propriedade background-attachment especifica se a imagem de fundo deve rolar ou ser fixa (não rolará com o resto da página).   EX: background-attachment: fixed; (o conteúdo sempre sera visível)   EX2: background-attachment: scroll; (o conteúdo rolará com o resto da página)

    3.6- Tamanho no plano de fundo: 
        A propriedade background-size permite especificar o tamanho das imagens de fundo. O tamanho pode ser especificado em comprimentos, porcentagens ou usando uma das duas palavras-chave: contain ou cover. A contain dimensiona a imagem de plano de fundo para ser o maior possível (mas tanto a largura quanto a altura devem caber dentro da área de conteúdo). Assim, dependendo das proporções da imagem de fundo e da área de posicionamento do fundo, pode haver algumas áreas do fundo que não são cobertas pela imagem de fundo. A cover dimensiona a imagem de plano de fundo para que a área de conteúdo seja totalmente coberta pela imagem de plano de fundo (sua largura e altura são iguais ou excedem a área de conteúdo). Como tal, algumas partes da imagem de fundo podem não estar visíveis na área de posicionamento de fundo.   EX: background-size: cover;

    3.7- Posição no plano de fundo: 
        A propriedade background-position é usada para especificar a posição da imagem de fundo.   EX: background-position: right top; (posição = direita e em cima)

    3.8- Taquigrafia/shorthand do fundo: 
        Para encurtar o código, também é possível especificar todas as propriedades do plano de fundo em uma única propriedade. Você pode usar a propriedade abreviada background. Ao usar a propriedade abreviada, a ordem dos valores da propriedade é: (1) background-color, (2) background-image, (3) background-repeat, (4) background-attachment e (5) background-position.   EX: body {   background: #ffffff url("porco.png") no-repeat right top;   }

4- Bordas: 
    4.1- Introdução:
        As propriedades de borda do CSS permitem que você especifique o estilo, a largura e a cor da borda de um elemento.
        
    4.2- Estilo da Borda: 
        Com a propriedade border-style, você pode definir a aparência da borda. Valores: dotted(Borda pontilhada), dashed(Borda pontilhada em negrito), solid (Borda normal), double(Borda dupla), groove(Borda cinza), ridge(Borda Branca), inset(Borda branca com cinza em cima), outset(Borda branca com cinza em baixo), none(Sem Borda), hidden(Borda oculta).   EX:  p{border-style: solid;}
        
    4.3- Largura da Borda: 
        A propriedade border-width especifica a largura das quatro bordas.A largura pode ser definida como um tamanho específico (em px, pt, cm, em, etc). A propriedade border-width pode ter de um a quatro valores (para a borda superior, borda direita, borda inferior e borda esquerda).   EX: border-width: 25px 10px 4px 35px;  [25px p/ cima, 10px p/ direita, 4px p/ baixo, 35px p/ esquerda]

    4.4- Cor da Borda: 
        A propriedade border-color é usada para definir a cor das quatro bordas. A propriedade border-color pode ter de um a quatro valores (para a borda superior, borda direita, borda inferior e borda esquerda).   EX: p   {border-color: blue;}

    4.5- Bordas arredondadas: 
        A propriedade border-radius é usada para adicionar bordas arredondadas a um elemento:   EX: border-radius: 5px;

    4.6- Taquigrafia/shorthand da Borda: 
        A propriedade border é uma propriedade abreviada para as seguintes propriedades de borda individuais: (1) border-width, (2) border-style(obrigatório) e (3) border-color.   EX: border: 5px solid red;

5- Margens:
    5.1 - Introdução:
        As margens são usadas para criar espaço ao redor dos elementos, fora de qualquer borda definida. Existem propriedades para definir a margem para cada lado de um elemento: margin-top (superior), margin-right (direita), margin-bottom (inferior) e margin-left (esquerda). Todas as propriedades de margem podem ter os seguintes valores: auto (o navegador calcula a margem), Comprimento (especifica uma margem em px, pt, cm, etc.), % (especifica uma margem em % da largura do elemento recipiente)
    
    5.2- Taquigrafia/shorthand das Margens: 
        A propriedade margin é uma propriedade abreviada para as seguintes propriedades de margem individuais: (1) margin-top, (2) margin-right, (3) margin-bottom e (4) margin-left.   EX: margin: 25px 50px 75px 100px; [25px p/ cima, 50px p/ direita, 75px p/ baixo, 100px p/ esquerda].   EX2: margin: 25px; [todas as quatro margens são 25px].

6- Padding:
    6.1- Introdução:
        A propriedade padding CSS são usadas para gerar espaço ao redor do conteúdo de um elemento, dentro de qualquer borda definida. Com CSS, você tem controle total sobre o preenchimento. Existem propriedades para definir o preenchimento de cada lado de um elemento padding-top (superior), padding-right (direita), padding-bottom (inferior) e padding-left (esquerda). Todas as propriedades de preenchimento podem ter os seguintes valores: Comprimento (especifica um padding em px, pt, cm, etc.), % 
        (especifica um padding em % da largura do elemento recipiente)

    6.2- Taquigrafia do Padding: 
        A propriedade padding é uma propriedade abreviada para as seguintes propriedades de preenchimento individuais: (1) padding-top, (2) padding-right, (3) padding-bottom e (4) padding-left.   EX: padding: 25px 50px 75px 100px; [25px p/ cima, 50px p/ direita, 75px p/ baixo, 100px p/ esquerda].   EX2: padding: 25px; [todas as quatro margens são 25px]. 

7- Altura e Largura:
    7.1- Introdução:
        As propriedades height e width são usados ​​para definir a altura e a largura de um elemento. A propriedade CSS max-width é usada para definir a largura máxima de um elemento. As propriedades height e width podem ter os seguintes valores: auto (Este é o padrão. O navegador calcula a altura e a largura), Comprimento (Define a altura/largura em px, cm, etc.), % (Define a altura/largura em porcentagem do bloco que o contém), initial (Define a altura/largura para seu valor padrão) e inherit (A altura/largura será herdada de seu valor pai).   EX: div { height: 200px; width: 50%;}
        
    7.2- Configurando a Altura e a largura máxima: 
        A propriedade max-width é usada para definir a largura máxima de um elemento . A propriedade max-height é usada para definir a altura máxima de um elemento. As duas propriedades podem ser especificadas em valores de comprimento , como px, cm, etc., ou em porcentagem (%) do bloco que o contém, ou definido como none (este é o padrão. Significa que não há largura máxima).   EX: div { max-width: 500px; max-height: 200px }

    7.3- Configurando a Altura e a largura mínimas: 
        A propriedade min-width é usada para definir a largura mínima de um elemento . A propriedade mix-height é usada para definir a altura mínima de um elemento. As duas propriedades podem ser especificadas em valores de comprimento , como px, cm, etc., ou em porcentagem (%) do bloco que o contém, ou definido como none (este é o padrão. Significa que não há largura mínima). EX: div { min-width: 50px; min-height: 20px }

8- Texto:
    8.1- Cor do texto: 
        A propriedade color é usada para definir a cor do texto.   EX: p  {color: blue;}
        
    8.2- Alinhamento de Texto: 
        A propriedade text-align é usada para definir o alinhamento horizontal de um texto. Um texto pode ser alinhado à esquerda ou à direita, centralizado ou justificado.   EX:   text-align: center;
        
        8.2.1- Alinhamento vertical: 
            A propriedade vertical-align define o alinhamento vertical de um elemento.   EX: vertical-align: text-bottom;

    8.3- Decoração de texto:
        8.3.1- Adicionar uma linha de decoração ao texto: 
            A propriedade text-decoration-line é usada para adicionar uma linha de decoração ao texto.   EX: text-decoration-line: overline;

        8.3.2- Especifique uma cor para a linha de decoração: 
            A propriedade text-decoration-color é usada para definir a cor da linha de decoração.   EX:   text-decoration-color: blue;

        8.3.3- Especifique um estilo para a linha de decoração: 
            A propriedade text-decoration-style é usada para definir o estilo da linha de decoração.   EX: text-decoration-style: wavy; (linha ondulada)

        8.3.4- Especifique a espessura para a linha de decoração: 
            A propriedade text-decoration-thickness é usada para definir a espessura da linha de decoração.   EX: text-decoration-thickness: 5px;

        8.3.5- Taquigrafia de Decoração: 
            A propriedade text-decoration é uma propriedade abreviada para as seguintes propriedades de decoração: (1) text-decoration-line(obrigatório), (2) text-decoration-color(opcional), (3) text-decoration-style(opcional), (4) text-decoration-thickness(opcional).   EX: p {text-decoration: underline red double 5px;}

        8.3.6- Dica: 
            Todos os links em HTML são sublinhados por padrão. Às vezes, você vê que os links são estilizados sem sublinhado. O text-decoration: none; é usado para remover o sublinhado dos links.

    8.4- Transformação de Texto: 
        A propriedade text-transform é usada para especificar letras maiúsculas e minúsculas em um texto. Ele pode ser usado para transformar tudo em letras maiúsculas ou minúsculas, ou colocar em maiúscula a primeira letra de cada palavra: EX: text-transform: capitalize;

    8.5- Espaçamento do Texto:
        8.5.1- Recuo de Texto: 
            A propriedade text-indent é usada para especificar o recuo da primeira linha de um texto.   EX: p {text-indent: 50px;}

        8.5.2- Espaçamento entre Letras: 
            A propriedade letter-spacing é usada para especificar o espaço entre os caracteres em um texto. EX:   letter-spacing: 5px;

        8.5.3- Altura da linha: 
            A propriedade line-height é usada para especificar o espaço entre as linhas:   EX: line-height: 0.8;

        8.5.4- Espaçamento entre palavras: 
            A propriedade word-spacing é usada para especificar o espaço entre as palavras em um texto.   EX:   word-spacing: 10px;

    8.6- Sombra de Texto: 
        A propriedade text-shadow adiciona sombra ao texto. Em seu uso mais simples, você especifica apenas a sombra horizontal e a sombra vertical. Em seguida, adicione um efeito de desfoque à sombra. Em seguida, adicione uma cor à sombra. :   EX:   text-shadow: 2px 2px 5px red;

9- Fontes:
    9.1- Introdução: 
        Escolher a fonte certa tem um grande impacto em como os leitores experimentam um site. A fonte certa pode criar uma identidade forte para sua marca. Usar uma fonte fácil de ler é importante. A fonte agrega valor ao seu texto. Também é importante escolher a cor e o tamanho do texto corretos para a fonte.
        
    9.2- Famílias de Fontes: 
        Em CSS existem cinco famílias de fontes genéricas: (1) fontes serifadas [têm um pequeno traço nas bordas de cada letra. Eles criam uma sensação de formalidade e elegância.]; (2) fontes sem serifa [têm linhas limpas (sem pequenos traços anexados). Eles criam um visual moderno e minimalista.]; (3)Fontes monoespaçadas  [aqui todas as letras têm a mesma largura fixa. Eles criam uma aparência mecânica.];  (4) fontes cursivas [imitam a caligrafia humana.]; (5)Fontes fantasia [são fontes decorativas/divertidas.].   Em CSS, usamos a propriedade font-family para especificar a fonte de um texto.   EX: font-family: "Times New Roman", Times, serif;

    9.3- Fontes Alternativas: 
        É muito importante sempre usar fontes alternativas. isso significa que você deve adicionar uma lista de "fontes de backup" semelhantes na propriedade font-family. Se a primeira fonte não funcionar, o navegador tentará a próxima, a próxima e assim por diante. Sempre termine a lista com um nome de família de fonte genérico.   EX: font-family: Arial, Tahoma, Verdana, sans-serif;

    9.4- Fontes mais usadas:
        9.4.1- Fontes Serifadas: 
            "Times New Roman", Times, serif; Georgia, serif; Garamond, serif;   (1) A Times New Roman é uma das fontes mais conhecidas do mundo. Parece profissional e é usado em muitos jornais e sites de "notícias". Também é a fonte principal para dispositivos e aplicativos do Windows.   (2) Georgia é uma fonte elegante com serifa. É muito legível em diferentes tamanhos de fonte, por isso é um bom candidato para design responsivo para dispositivos móveis.   (3) Garamond é uma fonte clássica usada para muitos livros impressos. Tem uma aparência atemporal e boa legibilidade.
                
        9.4.2- Fontes Sans-Serif: 
            Arial, Helvetica, sans-serif; Tahoma, Verdana, sans-serif; "Trebuchet MS", Helvetica, sans-serif; Geneva, Verdana, sans-serif;   (1) Arial é a fonte mais amplamente usada para mídia online e impressa. Arial também é a fonte padrão no Google Docs. Arial é uma das fontes da web mais seguras e está disponível em todos os principais sistemas operacionais.   (2) Verdana é uma fonte muito popular. Verdana é facilmente legível, mesmo para tamanhos de fonte pequenos.   (3) A fonte Tahoma tem menos espaço entre os caracteres.   (4) Trebuchet MS foi desenvolvido pela Microsoft em 1996. Use esta fonte com cuidado. Não suportado por todos os sistemas operacionais móveis.

        9.4.3- Fontes monoespaçadas: 
            "Courier New", Courier, monospace;   (1) Courier New é a fonte serif monoespaçada mais usada. Courier New é frequentemente usado com exibições de codificação e muitos provedores de e-mail o usam como fonte padrão. Courier New também é a fonte padrão para roteiros de filmes.
                
        9.4.4- Fontes cursivas: 
            "Brush Script MT", cursive;   (1) A fonte Brush Script MT foi projetada para imitar a caligrafia. É elegante e sofisticado, mas pode ser difícil de ler. Use-o com cuidado.
                
        9.4.5- Fontes Fantasia: 
            Copperplate, Papyrus, fantasy

    9.5- Estilo da Fonte: 
        A propriedade font-style é usada principalmente para especificar texto em itálico. Esta propriedade tem três valores: normal - [O texto é mostrado normalmente], italic [O texto é mostrado em itálico] e oblique [O texto está "inclinado" (oblique é muito semelhante ao itálico, mas menos suportado)].   EX: p { font-style: italic;}
                
        9.5.1- Espessura da fonte: 
            A propriedade font-weight especifica o peso de uma fonte:   EX: p {font-weight: bold;}
        
    9.6- Tamanho da fonte: 
        A propriedade font-size define o tamanho do texto.
        
        9.6.1- Definir tamanho da fonte com pixels:   
            EX:  p {font-size: 14px;}
                
        9.6.2- Definir tamanho da fonte com Em:   
            EX: p {font-size: 0.875em;} (No exemplo ao lado, o tamanho do texto em EM é o mesmo do exemplo anterior em pixels. Porém, com o tamanho em, é possível ajustar o tamanho do texto em todos os navegadores.)
                
        9.6.3- Tamanho da fonte responsiva: 
            O tamanho do texto pode ser definido com uma unidade vw, o que significa a "largura da janela de visualização". Dessa forma, o tamanho do texto seguirá o tamanho da janela do navegador:   EX: p {font-size:10vw} OBS: Viewport é o tamanho da janela do navegador. 1vw = 1% da largura da janela de visualização. Se a janela de visualização tiver 50 cm de largura, 1vw é 0,5 cm.

    9.7- Fontes do Google:
        9.7.1- Como usar as fontes do Google: 
            Basta adicionar um link de folha de estilo especial na seção <head> e, em seguida, consultar a fonte no CSS.   EX: <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Audiowide">; p {font-family: "Audiowide", sans-serif;}

    9.8- Taquigrafia das Fontes: 
        A propriedade font é uma propriedade abreviada para: (1)font-style, (2)font-variant, (3)font-weight, (4)font-size e (5)font-family.   EX: font: italic small-caps bold 12px Georgia, serif;

10- Links: 
    10.1- Introdução:
        Com CSS, os links podem ser estilizados de várias maneiras diferentes.
        
    10.2- Links de estilo: 
        Os links podem ser estilizados com qualquer propriedade CSS (por exemplo color, font-family, background, etc.). Além disso, os links podem ter estilos diferentes, dependendo do estado em que estão. Os quatro estados dos links são: (1) a:link [um link normal não visitado], (2) a:visited [um link que o usuário visitou], (3) a:hover [um link quando o usuário passa o mouse sobre ele] e (4) a:active [um link no momento em que é clicado].   OBS: Ao definir o estilo para vários estados de link, existem algumas regras de ordem: a:hover DEVE vir depois de a:link e a:visited e a:active DEVE vir depois de a:hover

    10.3- Decoração de texto: 
        A propriedade text-decoration é usada principalmente para remover sublinhados de links:   EX: a:visited {text-decoration: none;}

    10.4- Cor de fundo: 
        A propriedade background-color pode ser usada para especificar uma cor de fundo para links:   EX:   a:hover {background-color: cyan;}

    10.5- Exemplo completo: 
        a:link, a:visited {background-color: white; color: black; border: 2px solid green; padding: 10px 20px; text-align: center; text-decoration: none; display: inline-block;}   a:hover, a:active { background-color: green; color: white;}   Explicando: a:link e a:visited (possuí um background branco, cor de texto preto, borda solida verde, texto centralizado e sem underline no link), a:hover e a:active (quando passar o mouse ou clicar no link, ele vai passar a ter um background verde e cor de texto branco)

11- Display:
    11.1- Introdução: 
        A propriedade display é a propriedade CSS mais importante para controlar o layout. Cada elemento HTML tem um valor de exibição padrão, dependendo do tipo de elemento. O valor de exibição padrão para a maioria dos elementos é block ou inline.
                
    11.2- Elementos de nível de bloco: 
        Um elemento de nível de bloco sempre começa em uma nova linha e ocupa toda a largura disponível (estende-se para a esquerda e para a direita o máximo possível). Exemplos de elementos de nível de bloco: <div>, <h1> - <h6>, <p>, <form>, <header>, <footer> e <section>.   EX: a {display: block;}

    11.3- Elementos embutidos/inline: 
        Um elemento inline não começa em uma nova linha e ocupa apenas a largura necessária.Exemplos de elementos embutidos: <período>, <a> e <img>. Um exemplo comum é criar elementos <li> embutidos para menus horizontais:   EX: li {display: inline;}

    11.4- Bloco embutido: 
        display: inline-block permite definir uma largura e altura no elemento, as margens/preenchimentos superiores e inferiores são respeitados, não adiciona uma quebra de linha após o elemento, para que o elemento possa ficar próximo a outros elementos. Um uso comum para display: inline-block é exibir itens de lista horizontalmente em vez de verticalmente. O exemplo a seguir cria links de navegação horizontal:   EX: nav {background-color: yellow; list-style-type: none; text-align: center;  padding: 0; margin: 0;}   nav.li {display: inline-block; font-size: 20px; padding: 20px;}

    11.5- Mostrar nenhum; 
        display: none; é comumente usado com JavaScript para ocultar e mostrar elementos sem excluí-los e recriá-los.   EX:  h1 {display: none;}   OBS: visibility:hidden; também esconde um elemento. No entanto, o elemento ainda ocupará o mesmo espaço de antes. O elemento ficará oculto, mas ainda afetará o layout:   EX: h1 {visibility: hidden;}

12- Position:
    12.1- Introdução: 
        A propriedade position especifica o tipo de método de posicionamento usado para um elemento. Existem cinco valores de posição diferentes: static, relative, fixed, absolute e sticky
                
    12.2- Posição Estática: 
        Os elementos HTML são posicionados estáticos por padrão. Os elementos posicionados estáticos não são afetados pelas propriedades superior, inferior, esquerda e direita. Um elemento com position: static; não é posicionado de nenhuma maneira especial; está sempre posicionado de acordo com o fluxo normal da página:   EX: div {position: static;}

    12.3- Posição Relativa: 
        Um elemento com position: relative; é posicionado em relação à sua posição normal. Definir as propriedades superior, direita, inferior e esquerda de um elemento relativamente posicionado fará com que ele seja ajustado para longe de sua posição normal. Outros conteúdos não serão ajustados para caber em qualquer lacuna deixada pelo elemento.   EX: div {position: relative; left: 30px;}

    12.4- Posição Fixa: 
        Um elemento com position: fixed; é posicionado em relação à viewport, o que significa que ele sempre permanece no mesmo lugar, mesmo que a página seja rolada. As propriedades superior, direita, inferior e esquerda são usadas para posicionar o elemento. Um elemento fixo não deixa uma lacuna na página onde normalmente estaria localizado.   EX: div{position: fixed; bottom: 0; right: 0; width: 300px;}

    12.5- Posição Absoluta: 
        Um elemento com position: absolute; é posicionado em relação ao ancestral posicionado mais próximo (em vez de posicionado em relação à viewport, como fixo). No entanto; se um elemento posicionado absoluto não tiver ancestrais posicionados, ele usará o corpo do documento e se moverá junto com a rolagem da página.   EX: div {position: absolute; top: 80px; right: 0; width: 200px; height: 100px;}

    12.6- Posição Grudada: 
        Um elemento com position: sticky; é posicionado com base na posição de rolagem do usuário. Um elemento fixo alterna entre relative e fixed, dependendo da posição de rolagem. Ele é posicionado relativo até que uma determinada posição de deslocamento seja encontrada na viewport - então ele "gruda" no lugar (como position:fixed).   EX: { position: sticky; top: 0; background-color: green; border: 2px solid #4CAF50;}

13- z-index:
    13.1- Introdução: 
        A propriedade z-index: Quando os elementos são posicionados, eles podem se sobrepor a outros elementos. A propriedade z-index especifica a ordem da pilha de um elemento (qual elemento deve ser colocado na frente ou atrás dos outros). Um elemento pode ter uma ordem de pilha positiva ou negativa:   EX: img {position: absolute; z-index: -1;} (imagem ficará atrás de tudo)

14- Overflow:
    14.1- Introdução:
        A propriedade overflow especifica se deve cortar o conteúdo ou adicionar barras de rolagem quando o conteúdo de um elemento for muito grande para caber na área especificada. A propriedade overflow tem os seguintes valores: visible [Padrão. O overflow não é cortado. O conteúdo renderiza fora da caixa do elemento]; hidden [O overflow é cortado e o restante do conteúdo ficará invisível]; scroll [O overflow é cortado e uma barra de rolagem é adicionada para ver o restante do conteúdo] e auto [Semelhante ao scroll, mas adiciona barras de rolagem somente quando necessário].   EX: div {overflow: auto;}

15- Float:
    15.1- Introdução: 
        A propriedade float é usada para posicionar e formatar o conteúdo, por exemplo, deixar uma imagem flutuar à esquerda do texto em um contêiner. A propriedade float pode ter um dos seguintes valores: left [O elemento flutua à esquerda de seu contêiner], right [O elemento flutua à direita de seu contêiner], none [O elemento não flutua (será exibido apenas onde ocorre no texto). Isso é padrão], inherit [O elemento herda o valor float de seu pai].   EX:  img {float: right;} (O exemplo ao lado especifica que uma imagem deve flutuar à direita)

    15.2- Clear: 
        A propriedade clear especifica o que deve acontecer com o elemento próximo a um elemento flutuante. A propriedade  clear pode ter um dos seguintes valores: none [O elemento não é colocado abaixo dos elementos flutuantes esquerdo ou direito. Isso é padrão], left [O elemento é empurrado para baixo dos elementos flutuantes à esquerda], right [O elemento é empurrado abaixo dos elementos flutuantes à direita], both [O elemento é empurrado para baixo dos elementos flutuantes esquerdo e direito], inherit [O elemento herda o valor clear de seu pai].   EX:   img2 {clear: left;}

16- Opacity:
    16.1- Introdução: 
        A propriedade opacity pode assumir um valor de 0,0 a 1,0. Quanto menor o valor, mais transparente.   EX: img {opacity: 0.5;}

17- Especificidade: 
    17.1- Introdução:
        Se houver duas ou mais regras CSS que apontam para o mesmo elemento, o seletor com o maior valor de especificidade "vencerá" e sua declaração de estilo será aplicada a esse elemento HTML. Existem quatro categorias que definem o nível de especificidade de um seletor: (1) Estilos embutidos - EX: <h1 style="color: pink;">, (2) IDs - EX: #navbar, (3) Classes, pseudo-classes, seletores de atributo - EX: .test, :hover, [href] e (4) Elementos e pseudo-elementos - EX: h1, ::before

18- Gradientes:
    18.1- Introdução: 
        Os gradientes CSS permitem exibir transições suaves entre duas ou mais cores especificadas.
        
    18.2- Gradientes Lineares: 
        Para criar um gradiente linear, você deve definir pelo menos duas paradas de cor. Interrupções de cores são as cores entre as quais você deseja renderizar transições suaves. Você também pode definir um ponto inicial e uma direção (ou um ângulo) junto com o efeito de gradiente.
                
        18.2.1- Direção - De cima para baixo (este é o padrão):
           EX: #grad {background-image: linear-gradient(red, yellow);}  Explicando: [O exemplo anterior mostra um gradiente linear que começa no topo. Começa com vermelho, passando para amarelo]

        18.2.2- Direção - Esquerda para Direita:
            EX: #grad {background-image: linear-gradient(to right, red , yellow);}  Explicando: [O exemplo anterior mostra um gradiente linear que começa da esquerda. Começa vermelho, passando para amarelo]

        18.2.3- Usando Ângulos: 
            Se quiser mais controle sobre a direção do gradiente, você pode definir um ângulo, em vez das direções predefinidas (para baixo, para cima, para a direita, para a esquerda, para baixo à direita, etc.). Um valor de 0deg é equivalente a "to top". Um valor de 90 graus é equivalente a "para a direita". Um valor de 180 graus é equivalente a "to bottom".   EX: #grad {background-image: linear-gradient(180deg, red, yellow);}  Explicando: [O exemplo anterior mostra como usar ângulos em gradientes lineares]

        18.2.4- Usando várias paradas de cores:
           EX: #grad {background-image: linear-gradient(to right, red,orange,yellow,green,blue,indigo,violet);}  Explicando: [O exemplo anterior mostra como criar um gradiente linear (da esquerda para a direita) com a cor do arco-íris]

        18.1.5- Repetindo um gradiente linear: 
            A função repeating-linear-gradient() é usada para repetir gradientes lineares:   EX: #grad {background-image: repeating-linear-gradient(red, yellow 10%, green 20%);}

    18.3- Gradientes Radiais: 
        Um gradiente radial é definido por seu centro. Para criar um gradiente radial, você também deve definir pelo menos duas paradas de cor.
                
        18.3.1- Radial Gradient - Paradas de cor uniformemente espaçadas (este é o padrão):
           EX: #grad {background-image: radial-gradient(red, yellow, green);}  Explicando: [O exemplo anterior mostra um gradiente radial com limites de cores uniformemente espaçados]

        18.3.2- Definir forma: 
            O parâmetro de forma define a forma. Pode levar o valor círculo ou elipse. O valor padrão é elipse.   EX: #grad {background-image: radial-gradient(circle, red, yellow, green);}  Explicando: [O exemplo anterior mostra um gradiente radial com a forma de um círculo]

        18.3.3- Repetindo um gradiente radial: 
            A função repeating-radial-gradient() é usada para repetir gradientes radiais:   EX: #grad {background-image: repeating-radial-gradient(red, yellow 10%, green 15%);}

    18.4- Gradientes Cônicos: 
        Um gradiente cônico é um gradiente com transições de cores giradas em torno de um ponto central. Para criar um gradiente cônico, você deve definir pelo menos duas cores.
                
        18.4.1- Gradiente Cônico: Três Cores:   
            EX: #grad {background-image: conic-gradient(red, yellow, green);}  Explicando: [O exemplo anterior mostra um gradiente cônico com três cores]

        18.4.2- Gradiente Cônico: Cinco Cores: 
            EX: #grad {conic-gradient(red, yellow, green, blue, black);}  Explicando: [O exemplo anterior mostra um gradiente cônico com cinco cores]

        18.4.3- Gradiente Cônico: Três Cores e Graus:
           EX: #grad {background-image: conic-gradient(red 45deg, yellow 90deg, green 210deg);}  Explicando: [O exemplo anterior mostra um gradiente cônico com três cores e um grau para cada cor]

        18.4.4- Criar Gráficos de Pizza: 
            Basta adicionar border-radius: 50% para fazer o gradiente cônico parecer uma torta:   EX: #grad {conic-gradient(red 0deg, red 90deg, yellow 90deg, yellow 180deg, green 180deg, green 270deg, blue 270deg);}

        18.4.5- Repetindo um gradiente cônico: 
            A função repeating-conic-gradient() é usada para repetir gradientes cônicos:   EX: #grad {background-image: repeating-conic-gradient(red 0deg 10deg, yellow 10deg 20deg, blue 20deg 30deg); border-radius: 50%;}

19- Box Shadow e TextShadow:
    19.1- Sombra de Texto CSS: 
        A propriedade text-shadow adiciona sombra ao texto. Em seu uso mais simples, você especifica apenas a sombra horizontal e a sombra vertical. Em seguida, adicione um efeito de desfoque à sombra. e por último, adicione uma cor à sombra.   EX:   text-shadow: 2px 2px 5px red;  Sintaxe: text-shadow(Sombra Horizontal, Sombra Vertical, Desfoque e cor)

    19.2- Múltiplas Sombras: 
        Para adicionar mais de uma sombra ao texto, você pode adicionar uma lista de sombras separadas por vírgula.   EX: h1 {text-shadow: 0 0 3px #FF0000, 0 0 5px #0000FF;}  Explicando: [O exemplo anterior mostra uma sombra de brilho neon vermelho e azul]

    19.3- Sombra da Caixa: 
        A propriedade CSS box-shadow é usada para aplicar uma ou mais sombras a um elemento. Em seu uso mais simples, você especifica a sombra horizontal, a sombra vertical, efeito de desfoque à sombra, adicione o raio de propagação da sombra, adicione uma cor à sombra e por último, defina o parâmetro de inserção.   EX: div {box-shadow: 10px 10px 5px lightblue inset;}  Sintaxe: box-shadow(Sombra Horizontal, Sombra Vertical, Desfoque, raio, cor e inserção)
                
        19.3.1- Adicionar várias sombras: 
            div {box-shadow: 5px 5px blue, 10px 10px red, 15px 15px green;}

        19.3.2- Cartões: 
            Você também pode usar a propriedade box-shadow para criar cartões semelhantes a papel:   EX: div.card {width: 250px; box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); text-align: center;}

20- Efeitos de Texto:
    20.1- Estouro de texto: 
        A propriedade text-overflow especifica como o conteúdo transbordado que não é exibido deve ser sinalizado para o usuário.   EX:   text-overflow: ellipsis;

    20.2- Quebra de palavras: 
        A propriedade word-wrap permite que palavras longas possam ser quebradas e agrupadas na próxima linha.   EX: p {word-wrap: break-word;}

21- Media Query:
    21.1- Introdução: 
        As media queries podem ser usadas para verificar muitas coisas, como: largura e altura da viewport, largura e altura do dispositivo, orientação (o tablet/telefone está no modo paisagem ou retrato?) e resolução. O uso de media queries é uma técnica popular para fornecer uma folha de estilo personalizada para desktops, laptops, tablets e telefones celulares (como iPhone e telefones Android).

    21.2- Sintaxe de Media Queries: 
        Uma média queries consiste em um tipo de mídia e pode conter uma ou mais expressões, que são resolvidas como verdadeiras ou falsas. O resultado da consulta é verdadeiro se o tipo de mídia especificado corresponder ao tipo de dispositivo no qual o documento está sendo exibido e todas as expressões na consulta de mídia forem verdadeiras. Quando uma consulta de mídia é verdadeira, a folha de estilo ou as regras de estilo correspondentes são aplicadas, seguindo as regras normais em cascata.   <link rel="stylesheet" media="mediatype and (expressions)" href="print.css">

    21.3- Tipos de Mídia: 
        all [Usado para todos os dispositivos de tipo de mídia], print	[Usado para impressoras], screen [Usado para telas de computador, tablets, smartphones etc.] e speech [Usado para leitores de tela que "lê" a página em voz alta]

    21.4- Orientação: 
        Retrato/Paisagem: As consultas de mídia também podem ser usadas para alterar o layout de uma página, dependendo da orientação do navegador.   EX: @media only screen and (orientation: landscape) {body {background-color: lightblue;} }  Explicando: [A página da web terá um fundo azul claro se a orientação estiver no modo paisagem]

    21.5- Orientações dos Dispositivos:
        21.5.1- Smartphones (600px para baixo):
            @media only screen and (max-width: 600px) {...}

        21.5.2- Pequenos Tablets e Smartphones largos (600px para cima):
            Dispositivos um pouco maiores, mas ainda pequenos.  @media only screen and (min-width: 600px) {...}

        21.5.3- Dispositivos Médios e Tablets deitados (768px para cima):
                @media only screen and (min-width: 768px) {...}

        21.5.4- Dispositivos Largos e laptops/desktops (992px para cima):
            @media only screen and (min-width: 992px) {...}

        21.5.5- Super Largos, Telas maiores, laptops, desktops e até TVs (1200px para cima):
            @media only screen and (min-width: 1200px) {...}

    21.6- Exemplo Completo: 
        body {background-color: pink;}   @media screen and (min-width: 480px) {body { background-color: lightgreen;}}  Explicando: [O exemplo anterior altera a cor de fundo para verde claro se a viewport tiver 480 pixels de largura ou mais (se a viewport tiver menos de 480 pixels, a cor de fundo será rosa)]

22- Flexbox:
    22.1- Contêiner flexível: 
        22.1.1- Introdução:
            O flex container torna-se flexível definindo a propriedade display como flex.   EX: .flex-container {display: flex;} As propriedades do flex container são: flex-direction, flex-wrap, flex-flow, justify-content, align-items e align-content.
                
        22.1.2- A propriedade flex-direction: 
            A propriedade flex-direction define em qual direção o contêiner deseja empilhar os itens flexíveis. Valores: column [empilha os itens flexíveis verticalmente (de cima para baixo)]; column-reverse [empilha os itens flexíveis verticalmente (mas de baixo para cima)]; row [empilha os itens flexíveis horizontalmente (da esquerda para a direita)] e row-reverse [empilha os flex items horizontalmente (mas da direita para a esquerda)].   EX: .flex-container {display: flex; flex-direction: row;}

        22.1.3- A propriedade flex-wrap: 
            A propriedade flex-wrap especifica se os itens flexíveis devem ser encapsulados ou não.   EX: .flex-container {display: flex; flex-wrap: wrap;}

        22.1.4- A propriedade de flex-flow: 
            A propriedade flex-flow é uma propriedade abreviada para definir as propriedades flex-direction e flex-wrap.   EX: .flex-container {display: flex; flex-flow: row wrap;}

        22.1.5- A propriedade de conteúdo justificado: 
            A propriedade justify-content é usada para alinhar os itens flexíveis na posição horizontal(esquerda direita):   EX: .flex-container {display: flex; justify-content: Between;}

        22.1.6- A propriedade align-items: 
            A propriedade align-items é usada para alinhar os itens em uma posição flexível na posição vertical(cima baixo).   EX: .flex-container {display: flex; align-items: center;}

        22.1.7- A propriedade align-content: 
            A propriedade align-content é usada para alinhar as linhas flexíveis.   EX: .flex-container {display: flex; flex-wrap: wrap; align-content: flex-start;}

    22.2- Centralização Perfeita:   
        EX: .flex-container {display: flex; height: 300px; justify-content: center; align-items: center;}

    
    
    
    
    
    22.9- Itens flexíveis: 
        As propriedades do item flexível são: order, flex-grow, flex-shrink, flex-basis, flex e align-self

        22.9.1- A propriedade order: 
            A propriedade order especifica a ordem dos itens flexíveis.   EX: <div class="flex-container">   <div style="order: 3">1</div>   <div style="order: 2">2</div>   <div style="order: 4">3</div>   <div style="order: 1">4</div>   </div>

        22.9.2- A propriedade de crescimento flexível: 
            A propriedade flex-grow especifica quanto um item flexível crescerá em relação ao restante dos itens flexíveis.   EX: <div class="flex-container">   <div style="flex-grow: 1">1</div>   <div style="flex-grow: 1">2</div>   <div style="flex-grow: 8">3</div>   </div>  Explicando: [o terceiro item flexível cresce oito vezes mais rápido que os outros itens flexíveis]

        22.9.3- A propriedade flex-shrink: 
            A propriedade flex-shrink especifica quanto um item flexível encolherá em relação ao restante dos itens flexíveis.   EX: <div class="flex-container">   <div>1</div>   <div>2</div>   <div style="flex-shrink: 0">3</div>   <div>4</div>   <div>5</div>   </div>

        22.9.4- A propriedade de base flexível: 
            A propriedade flex-basis especifica o comprimento inicial de um item flexível.   EX: <div class="flex-container">   <div>1</div>   <div>2</div>   <div style="flex-basis: 200px">3</div>   <div>4</div>   </div>

                25.2.5- A propriedade align-self: A propriedade align-self especifica o alinhamento do item selecionado dentro do contêiner flexível. A propriedade align-self substitui o alinhamento padrão definido pela propriedade align-items do contêiner.   EX: <div class="flex-container">   <div>1</div>   <div>2</div>   <div style="align-self: center">3</div>   <div>4</div>   </div>

                25.2.6- A propriedade flexível: A propriedade flex é uma propriedade abreviada para as propriedades flex-grow, flex-shrink e flex-basis.   EX: <div class="flex-container">   <div>1</div>   <div>2</div>   <div style="flex: 0 0 200px">3</div>   <div>4</div>   </div>

        25.3- Flex responsivo:
                25.3.1- Caixa flexível responsiva:   EX: @media (max-width: 800px) {.flex-container {flex-direction: column;}  }  Explicando: [é exibido uma coluna para tamanhos de tela pequenos (como telefones e tablets)]

